generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  addressID  Int        @id @default(autoincrement())
  postalCode String
  latitude   Float?
  longitude  Float?
  Locality   String?
  addressNo  String
  streetName String?
  PostOffice PostOffice @relation(fields: [postalCode], references: [postalCode])
  Customer   Customer[]
}

model Bundle {
  barcodeID      Int
  bundleID       Int        @id @default(autoincrement())
  destPostalCode String
  PostOffice     PostOffice @relation(fields: [destPostalCode], references: [postalCode])
  Mail           Mail[]
}

model Customer {
  customerID   Int           @id
  customerName String
  telephone    String?
  addressID    Int
  Address      Address       @relation(fields: [addressID], references: [addressID])
  Mail         Mail[]
  Transaction  Transaction[]
}

model Employee {
  password     String?
  email        String     @unique
  employeeID   String     @id
  role         Role
  telephone    String
  employeeName String
  postalCode   String
  PostOffice   PostOffice @relation(fields: [postalCode], references: [postalCode])
  Leave        Leave?
}

model Leave {
  employeeID    String        @id
  leaveType     String
  startDate     DateTime
  endDate       DateTime
  description   String
  status        String
  RequestStatus RequestStatus @default(PENDING)
  Employee      Employee      @relation(fields: [employeeID], references: [employeeID])
}

model Mail {
  barcodeID     Int          @id @default(autoincrement())
  category      MailCategory
  recepientID   Int
  bundleID      Int
  postalCode    String
  mailstatus    MailStatus
  transactionID Int
  Bundle        Bundle       @relation(fields: [bundleID], references: [bundleID])
  PostOffice    PostOffice   @relation(fields: [postalCode], references: [postalCode])
  Customer      Customer     @relation(fields: [recepientID], references: [customerID])
  Transaction   Transaction  @relation(fields: [transactionID], references: [transactionID])
}

model PostOffice {
  postalCode         String             @id
  postOfficeCategory PostOfficeCategory
  postOfficeName     String
  headOfficeID       String?
  Address            Address[]
  Bundle             Bundle[]
  Employee           Employee[]
  Mail               Mail[]
}

model Transaction {
  transactionID Int      @id @default(autoincrement())
  date          DateTime
  amount        Float
  customerID    Int
  Mail          Mail[]
  Customer      Customer @relation(fields: [customerID], references: [customerID])
}

enum MailCategory {
  NORMAL_MAIL
  COURIER
  MONEY_ORDER
  REGISTERED_MAIL
}

enum MailStatus {
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum PostOfficeCategory {
  HEAD_OFFICE
  SUB_OFFICE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  POSTMASTER
  SUPERVISOR
  RECEPTIONIST
  DISPATCHER
  POSTMAN
}
